#!/usr/bin/env bash
# deb-repo-init.sh - Initialize local Debian package repository following XDG conventions
# Managed by ChezMoi. Do not edit.
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::

{{- if .isUbuntu }}
set -eo pipefail

# Load logger library
HERE="$( cd -- "$( dirname -- "${BASH_SOURCE[0]:-$0}"; )" \
    &> /dev/null && pwd 2> /dev/null; )";
. "${HERE}/../lib/logger/core.bash"

# Configuration following XDG conventions with user-level location
DEB_REPO_DIR="{{ .chezmoi.homeDir }}/.local/share/debs"
POOL_DIR="${DEB_REPO_DIR}/pool"
DISTS_DIR="${DEB_REPO_DIR}/dists"
CACHE_DIR="{{ env "XDG_CACHE_HOME" | default (printf "%s/.cache" .chezmoi.homeDir) }}/deb"
CONFIG_DIR="{{ env "XDG_CONFIG_HOME" | default (printf "%s/.config" .chezmoi.homeDir) }}/deb"

# Repository metadata
REPO_CODENAME="local"
REPO_COMPONENT="main"
REPO_ARCHITECTURE="amd64"
REPO_ORIGIN="Local Repository"
REPO_LABEL="local-deb-repo"
REPO_DESCRIPTION="Local Debian package repository"

# APT sources configuration
APT_SOURCES_FILE_TEMPLATE="${CONFIG_DIR}/local-deb-repo.list"
SOURCES_ENTRY="deb [trusted=yes] file://${DEB_REPO_DIR} ${REPO_CODENAME} ${REPO_COMPONENT}"

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    local required_deps=("dpkg-scanpackages" "gzip" "apt-ftparchive")

    for dep in "${required_deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        logger::error "Missing dependencies: ${missing_deps[*]}"
        logger::info "Install with: sudo apt install dpkg-dev apt-utils"
        return 1
    fi

    return 0
}

# Function to initialize repository structure
init_repo_structure() {
    logger::info "Initializing local deb repository structure..."

    # Create repository directories
    mkdir -p "${DEB_REPO_DIR}"
    mkdir -p "${POOL_DIR}/${REPO_COMPONENT}"
    mkdir -p "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}"
    mkdir -p "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/source"

    # Create user-accessible directories
    mkdir -p "${CACHE_DIR}"
    mkdir -p "${CONFIG_DIR}"

    logger::info "Created repository directories:"
    logger::info "  Repository root: ${DEB_REPO_DIR}"
    logger::info "  Pool: ${POOL_DIR}"
    logger::info "  Distributions: ${DISTS_DIR}"
    logger::info "  Cache: ${CACHE_DIR}"
    logger::info "  Config: ${CONFIG_DIR}"
}

# Function to create repository configuration
create_repo_config() {
    local conf_file="${DISTS_DIR}/${REPO_CODENAME}/Release"

    tee "${conf_file}" > /dev/null << EOF
Origin: ${REPO_ORIGIN}
Label: ${REPO_LABEL}
Codename: ${REPO_CODENAME}
Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')
Architectures: ${REPO_ARCHITECTURE}
Components: ${REPO_COMPONENT}
Description: ${REPO_DESCRIPTION}
EOF

    logger::info "Created Release file at ${conf_file}"
}

# Function to create apt-ftparchive configuration
create_ftparchive_config() {
    local ftparchive_conf="${CONFIG_DIR}/apt-ftparchive.conf"

    cat > "${ftparchive_conf}" << EOF
Dir {
    ArchiveDir "${DEB_REPO_DIR}";
    CacheDir "${CACHE_DIR}";
};

TreeDefault {
    Directory "pool/";
};

BinDirectory "pool/${REPO_COMPONENT}" {
    Packages "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages";
    BinOverride "/dev/null";
    ExtraOverride "/dev/null";
};

Default {
    Packages {
        Extensions ".deb";
        Compress ". gzip";
    };
};

Contents {
    Compress "gzip";
};
EOF

    logger::info "Created apt-ftparchive config at ${ftparchive_conf}"
}

# Function to create sources.list entry template
create_sources_list_template() {
    local sources_template="${APT_SOURCES_FILE_TEMPLATE}"

    cat > "${sources_template}" << EOF
# Local Debian repository
# To use this repository, copy this file to /etc/apt/sources.list.d/
# sudo cp '${sources_template}' /etc/apt/sources.list.d/
${SOURCES_ENTRY}
EOF

    logger::info "Created sources.list template at ${sources_template}"
}

# Function to add repository to APT sources
add_to_apt_sources() {
    logger::info "To add this repository to APT, run the following command:"
    logger::info "sudo cp '${APT_SOURCES_FILE_TEMPLATE}' /etc/apt/sources.list.d/"
}

# Function to remove repository from APT sources
remove_from_apt_sources() {
    logger::info "To remove this repository from APT, run the following command:"
    logger::info "sudo rm -f '/etc/apt/sources.list.d/$(basename "${APT_SOURCES_FILE_TEMPLATE}")'"
}

# Function to create .gitignore
create_gitignore() {
    local gitignore_file="${DEB_REPO_DIR}/.gitignore"

    tee "${gitignore_file}" > /dev/null << 'EOF'
# Deb repository .gitignore
# Ignore downloaded packages but keep structure
pool/**/*.deb
pool/**/*.ddeb
pool/**/*.tar.*
pool/**/*.dsc

# Keep important files
!pool/.keep
!dists/
dists/*/Release.gpg
dists/*/InRelease

# Cache files
.cache/
EOF

    logger::info "Created .gitignore at ${gitignore_file}"
}

# Function to create keep files
create_keep_files() {
    touch "${POOL_DIR}/${REPO_COMPONENT}/.keep"
    touch "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/.keep"
    logger::info "Created .keep files for empty directories"
}

# Function to set permissions
set_permissions() {
    # No-op, user owns all files
    :
}

# Function to update package indexes
update_indexes() {
    logger::info "Updating package indexes..."

    # Generate Packages file
    cd "${DEB_REPO_DIR}"
    dpkg-scanpackages -m "pool/${REPO_COMPONENT}" | tee "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" > /dev/null
    gzip -9c "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" | tee "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages.gz" > /dev/null

    # Update Release file with checksums
    local release_file="dists/${REPO_CODENAME}/Release"
    local temp_release=$(mktemp)

    # Copy existing Release content except checksums and date
    grep -v "^MD5Sum:|^SHA1:|^SHA256:|^Date:|^ " "${release_file}" > "${temp_release}" || true

    # Add updated date
    echo "Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')" >> "${temp_release}"

    # Add checksums with proper formatting
    echo "MD5Sum:" >> "${temp_release}"
    find "dists/${REPO_CODENAME}" -type f ! -name "Release*" -exec md5sum {} \; | while read -r hash file; do
        size=$(stat -c%s "$file")
        relative_path="${file#dists/${REPO_CODENAME}/}"
        printf " %s %8d %s\n" "$hash" "$size" "$relative_path"
    done >> "${temp_release}"

    echo "SHA1:" >> "${temp_release}"
    find "dists/${REPO_CODENAME}" -type f ! -name "Release*" -exec sha1sum {} \; | while read -r hash file; do
        size=$(stat -c%s "$file")
        relative_path="${file#dists/${REPO_CODENAME}/}"
        printf " %s %8d %s\n" "$hash" "$size" "$relative_path"
    done >> "${temp_release}"

    echo "SHA256:" >> "${temp_release}"
    find "dists/${REPO_CODENAME}" -type f ! -name "Release*" -exec sha256sum {} \; | while read -r hash file; do
        size=$(stat -c%s "$file")
        relative_path="${file#dists/${REPO_CODENAME}/}"
        printf " %s %8d %s\n" "$hash" "$size" "$relative_path"
    done >> "${temp_release}"

    mv "${temp_release}" "${release_file}"

    logger::info "Package indexes updated successfully"
}

# Function to validate repository structure
validate_repo() {
    local errors=0

    # Check required directories
    local required_dirs=(
        "${POOL_DIR}/${REPO_COMPONENT}"
        "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}"
        "${CONFIG_DIR}"
    )

    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            logger::error "Missing directory: $dir"
            ((errors++))
        fi
    done

    # Check Release file
    if [[ ! -f "${DISTS_DIR}/${REPO_CODENAME}/Release" ]]; then
        logger::error "Missing Release file: ${DISTS_DIR}/${REPO_CODENAME}/Release"
        ((errors++))
    fi

    if [[ $errors -eq 0 ]]; then
        logger::info "Repository validation passed"
        return 0
    else
        logger::error "Repository validation failed with $errors errors"
        return 1
    fi
}

# Function to show repository status
show_status() {
    logger::info "Local deb repository status:"
    echo "  Repository root: ${DEB_REPO_DIR}"
    echo "  Pool directory: ${POOL_DIR}"
    echo "  Distributions: ${DISTS_DIR}"
    echo "  Config: ${CONFIG_DIR}"
    echo "  Cache: ${CACHE_DIR}"
    echo

    # Count packages
    local package_count
    package_count=$(find "${POOL_DIR}" -name "*.deb" | wc -l 2>/dev/null || echo "0")
    echo "  Total packages: ${package_count}"

    # Show repository details
    echo "  Codename: ${REPO_CODENAME}"
    echo "  Component: ${REPO_COMPONENT}"
    echo "  Architecture: ${REPO_ARCHITECTURE}"
    echo

    # Show APT integration status
    echo "  APT Integration:"
    echo "    Sources list template: ${APT_SOURCES_FILE_TEMPLATE}"
    echo "    To enable, run: sudo cp '${APT_SOURCES_FILE_TEMPLATE}' /etc/apt/sources.list.d/"
}

# Function to show help
show_help() {
    cat << EOF
Usage: $0 [COMMAND]

Commands:
  init      Initialize repository structure and add to APT sources (default)
  update    Update package indexes
  status    Show repository status
  validate  Validate repository structure
  add-apt   Add repository to APT sources
  remove-apt Remove repository from APT sources
  help      Show this help message

Examples:
  $0 init          # Initialize repository and add to APT
  $0 update        # Update package indexes
  $0 status        # Show repository status
  $0 add-apt       # Add repository to APT sources
  $0 remove-apt    # Remove repository from APT sources

After initialization, you can:
  - Add packages with: deb-repo-add.sh add ./package.deb
  - Download packages with: deb-repo-add.sh download firefox
  - Install packages with: sudo apt install package-name
EOF
}

# Main function
main() {
    case "${1:-init}" in
        "init")
            check_dependencies || exit 1
            init_repo_structure
            create_repo_config
            create_ftparchive_config
            create_sources_list_template
            create_gitignore
            create_keep_files
            set_permissions
            update_indexes
            validate_repo
            show_status
            echo
            logger::info "Repository initialization complete!"
            logger::info "Repository location: ${DEB_REPO_DIR}"
            logger::info "To use this repository with apt, you must copy the sources list file."
            ;;
        "update")
            update_indexes
            ;;
        "status")
            show_status
            ;;
        "validate")
            validate_repo
            ;;
        "add-apt")
            add_to_apt_sources
            ;;
        "remove-apt")
            remove_from_apt_sources
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            logger::error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

main "$@"
{{- else }}
echo "This script is only for Ubuntu systems"
exit 1
{{- end }}
