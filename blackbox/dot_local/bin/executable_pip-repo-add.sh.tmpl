#!/usr/bin/env bash
# pip-repo-add.sh - Add packages to local PEP 503 compliant pip repository
# Managed by ChezMoi. Do not edit.
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::

set -euo pipefail

# Configuration
PIP_REPO_DIR="{{ .chezmoi.homeDir }}/.local/share/pip"
SIMPLE_DIR="${PIP_REPO_DIR}/simple"
PACKAGES_DIR="${PIP_REPO_DIR}/packages"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# Function to normalize package name according to PEP 503
normalize_name() {
    local name="$1"
    # Convert to lowercase and replace any runs of [_.-]+ with a single -
    echo "$name" | tr '[:upper:]' '[:lower:]' | sed 's/[_.-]\+/-/g'
}

# Function to extract package name and version from filename
parse_package_file() {
    local filename="$1"
    local basename="${filename##*/}"

    # Handle wheel files (.whl)
    if [[ "$basename" =~ ^(.+)-([^-]+)-[^-]+-[^-]+-[^-]+\.whl$ ]]; then
        local name="${BASH_REMATCH[1]}"
        local version="${BASH_REMATCH[2]}"
        echo "$(normalize_name "$name")" "$version"
        return 0
    fi

    # Handle source distributions (.tar.gz)
    if [[ "$basename" =~ ^(.+)-([^-]+)\.tar\.gz$ ]]; then
        local name="${BASH_REMATCH[1]}"
        local version="${BASH_REMATCH[2]}"
        echo "$(normalize_name "$name")" "$version"
        return 0
    fi

    log_error "Cannot parse package name from: $basename"
    return 1
}

# Function to calculate file hash
calculate_hash() {
    local file="$1"
    local hash_type="${2:-sha256}"

    case "$hash_type" in
        "sha256")
            sha256sum "$file" | cut -d' ' -f1
            ;;
        "md5")
            md5sum "$file" | cut -d' ' -f1
            ;;
        *)
            log_error "Unsupported hash type: $hash_type"
            return 1
            ;;
    esac
}

# Function to create or update package index
update_package_index() {
    local package_name="$1"
    local package_dir="${SIMPLE_DIR}/${package_name}"

    mkdir -p "$package_dir"

    local index_file="${package_dir}/index.html"

    # Start HTML
    cat > "$index_file" << EOF
<!DOCTYPE html>
<html>
<head>
    <meta name="pypi:repository-version" content="1.0">
    <title>Links for ${package_name}</title>
</head>
<body>
    <h1>Links for ${package_name}</h1>
EOF

    # Add links for all package files
    # Handle both normalized names (with hyphens) and original names (with underscores)
    local package_files=()
    local search_patterns=("${package_name}-*")
    
    # If package name contains hyphens, also search for underscore variants
    if [[ "$package_name" =~ - ]]; then
        local underscore_name="${package_name//-/_}"
        search_patterns+=("${underscore_name}-*")
    fi
    
    # Find files matching any of the patterns
    for pattern in "${search_patterns[@]}"; do
        while IFS= read -r -d '' file; do
            package_files+=("$file")
        done < <(find "${PACKAGES_DIR}" -name "$pattern" -type f -print0)
    done
    
    # Sort and deduplicate
    if [[ ${#package_files[@]} -gt 0 ]]; then
        mapfile -t package_files < <(printf '%s\n' "${package_files[@]}" | sort -u)
    fi

    for file in "${package_files[@]}"; do
        local filename="${file##*/}"
        local hash
        hash=$(calculate_hash "$file" "sha256")

        # Create relative path from simple index to packages
        local rel_path="../../packages/${filename}"

        echo "    <a href=\"${rel_path}#sha256=${hash}\">${filename}</a><br>" >> "$index_file"
    done

    # Close HTML
    cat >> "$index_file" << EOF
</body>
</html>
EOF

    log_info "Updated index for package: $package_name"
}

# Function to update main index
update_main_index() {
    local main_index="${SIMPLE_DIR}/index.html"

    # Start HTML
    cat > "$main_index" << EOF
<!DOCTYPE html>
<html>
<head>
    <meta name="pypi:repository-version" content="1.0">
    <title>Local Python Package Index</title>
</head>
<body>
    <h1>Local Python Package Index</h1>
    <p>PEP 503 compliant simple repository index</p>
EOF

    # Add links for all packages
    local package_dirs
    mapfile -t package_dirs < <(find "${SIMPLE_DIR}" -mindepth 1 -maxdepth 1 -type d | sort)

    for dir in "${package_dirs[@]}"; do
        local package_name="${dir##*/}"
        echo "    <a href=\"${package_name}/\">${package_name}</a><br>" >> "$main_index"
    done

    # Close HTML
    cat >> "$main_index" << EOF
</body>
</html>
EOF

    log_info "Updated main index with $(( ${#package_dirs[@]} )) packages"
}

# Function to add a package file
add_package() {
    local source_file="$1"

    if [[ ! -f "$source_file" ]]; then
        log_error "File not found: $source_file"
        return 1
    fi

    # Parse package name and version
    local parse_result
    if ! parse_result=$(parse_package_file "$source_file"); then
        return 1
    fi

    read -r package_name package_version <<< "$parse_result"
    log_info "Adding package: $package_name version $package_version"

    # Copy file to packages directory
    local filename="${source_file##*/}"
    local dest_file="${PACKAGES_DIR}/${filename}"

    if [[ -f "$dest_file" ]]; then
        log_warn "Package file already exists: $filename"
        read -p "Overwrite? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Skipping package addition"
            return 0
        fi
    fi

    cp "$source_file" "$dest_file"
    log_info "Copied package file to: $dest_file"

    # Update package index
    update_package_index "$package_name"

    # Update main index
    update_main_index

    log_info "Successfully added package: $package_name"
}

# Function to download and add package
download_and_add() {
    local package_spec="$1"
    local temp_dir
    temp_dir=$(mktemp -d)

    log_info "Downloading package: $package_spec"

    # Download package without installing
    if pip download --dest "$temp_dir" --no-deps "$package_spec"; then
        # Add all downloaded files
        local downloaded_files
        mapfile -t downloaded_files < <(find "$temp_dir" -name "*.whl" -o -name "*.tar.gz")

        for file in "${downloaded_files[@]}"; do
            add_package "$file"
        done
    else
        log_error "Failed to download package: $package_spec"
        rm -rf "$temp_dir"
        return 1
    fi

    rm -rf "$temp_dir"
}

# Function to show usage
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS] COMMAND

Commands:
  add FILE         Add a local package file to the repository
  download SPEC    Download and add a package from PyPI
  list            List all packages in the repository
  remove PACKAGE   Remove a package from the repository

Options:
  -h, --help      Show this help message

Examples:
  $0 add ./my-package-1.0.0.whl
  $0 download requests==2.28.0
  $0 download numpy
  $0 list
  $0 remove my-package
EOF
}

# Function to list packages
list_packages() {
    log_info "Packages in local repository:"

    local package_dirs
    mapfile -t package_dirs < <(find "${SIMPLE_DIR}" -mindepth 1 -maxdepth 1 -type d | sort)

    if [[ ${#package_dirs[@]} -eq 0 ]]; then
        echo "  No packages found"
        return
    fi

    for dir in "${package_dirs[@]}"; do
        local package_name="${dir##*/}"
        local file_count=0
        # Count files with both hyphen and underscore variants
        file_count=$(find "${PACKAGES_DIR}" -name "${package_name}-*" -type f | wc -l)
        if [[ "$package_name" =~ - ]]; then
            local underscore_name="${package_name//-/_}"
            local underscore_count
            underscore_count=$(find "${PACKAGES_DIR}" -name "${underscore_name}-*" -type f | wc -l)
            file_count=$((file_count + underscore_count))
        fi
        echo "  $package_name ($file_count files)"
    done
}

# Function to remove package
remove_package() {
    local package_name="$1"
    local normalized_name
    normalized_name=$(normalize_name "$package_name")

    log_info "Removing package: $normalized_name"

    # Remove package files
    local removed_count=0
    local package_files=()
    
    # Find files with both hyphen and underscore variants
    mapfile -t package_files < <(find "${PACKAGES_DIR}" -name "${normalized_name}-*" -type f)
    
    if [[ "$normalized_name" =~ - ]]; then
        local underscore_name="${normalized_name//-/_}"
        local underscore_files
        mapfile -t underscore_files < <(find "${PACKAGES_DIR}" -name "${underscore_name}-*" -type f)
        package_files+=("${underscore_files[@]}")
    fi

    for file in "${package_files[@]}"; do
        rm -f "$file"
        log_info "Removed: ${file##*/}"
        ((removed_count++))
    done

    # Remove package index directory
    local package_dir="${SIMPLE_DIR}/${normalized_name}"
    if [[ -d "$package_dir" ]]; then
        rm -rf "$package_dir"
        log_info "Removed package index: $normalized_name"
    fi

    # Update main index
    update_main_index

    log_info "Removed $removed_count files for package: $normalized_name"
}

# Main function
main() {
    # Check if repository is initialized
    if [[ ! -d "$SIMPLE_DIR" ]]; then
        log_error "Repository not initialized. Run 'pip-repo-init.sh' first."
        exit 1
    fi

    case "${1:-}" in
        "add")
            if [[ $# -lt 2 ]]; then
                log_error "Missing file argument for add command"
                show_usage
                exit 1
            fi
            add_package "$2"
            ;;
        "download")
            if [[ $# -lt 2 ]]; then
                log_error "Missing package specification for download command"
                show_usage
                exit 1
            fi
            download_and_add "$2"
            ;;
        "list")
            list_packages
            ;;
        "remove")
            if [[ $# -lt 2 ]]; then
                log_error "Missing package name for remove command"
                show_usage
                exit 1
            fi
            remove_package "$2"
            ;;
        "-h"|"--help")
            show_usage
            ;;
        "")
            log_error "No command specified"
            show_usage
            exit 1
            ;;
        *)
            log_error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

main "$@"