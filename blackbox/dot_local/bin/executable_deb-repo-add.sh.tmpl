#!/usr/bin/env bash
# deb-repo-add.sh - Add packages to local Debian repository
# Managed by ChezMoi. Do not edit.
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::

{{- if .isUbuntu }}
set -eo pipefail

# Load logger library
HERE="$( cd -- "$( dirname -- "${BASH_SOURCE[0]:-$0}"; )" \
    &> /dev/null && pwd 2> /dev/null; )";
. "${HERE}/../lib/logger/core.bash"

# Configuration - Use the same paths as deb-repo-init.sh
DEB_REPO_DIR="/var/cache/apt/local-repo"
POOL_DIR="${DEB_REPO_DIR}/pool"
DISTS_DIR="${DEB_REPO_DIR}/dists"
CACHE_DIR="{{ env "XDG_CACHE_HOME" | default (printf "%s/.cache" .chezmoi.homeDir) }}/deb"
USER_REPO_LINK="{{ .chezmoi.homeDir }}/.local/share/deb"

REPO_CODENAME="local"
REPO_COMPONENT="main"
REPO_ARCHITECTURE="amd64"

# Function to parse deb package information
parse_deb_info() {
    local deb_file="$1"

    if [[ ! -f "$deb_file" ]]; then
        logger::error "File not found: $deb_file" >&2
        return 1
    fi

    # Check file size
    local file_size
    file_size=$(stat -c%s "$deb_file" 2>/dev/null || echo "0")
    if [[ "$file_size" -lt 1000 ]]; then
        logger::error "File appears to be too small ($file_size bytes) to be a valid .deb package" >&2
        logger::debug "File contents preview:" >&2
        head -c 200 "$deb_file" | hexdump -C | head -5 | sed 's/^/  /' >&2
        return 1
    fi

    # Check file magic bytes
    local file_magic
    file_magic=$(file -b "$deb_file" 2>/dev/null || echo "unknown")
    logger::debug "File type detected: $file_magic" >&2

    if ! dpkg-deb --info "$deb_file" >/dev/null 2>&1; then
        logger::error "Invalid Debian package: $deb_file" >&2
        logger::debug "File size: $(du -h "$deb_file" | cut -f1)" >&2
        logger::debug "File type: $file_magic" >&2

        # Try to get more specific error from dpkg-deb
        local dpkg_error
        dpkg_error=$(dpkg-deb --info "$deb_file" 2>&1 || true)
        logger::debug "dpkg-deb error: $dpkg_error" >&2

        return 1
    fi

    local package_name version architecture
    package_name=$(dpkg-deb --field "$deb_file" Package)
    version=$(dpkg-deb --field "$deb_file" Version)
    architecture=$(dpkg-deb --field "$deb_file" Architecture)

    echo "$package_name" "$version" "$architecture"
}

# Function to calculate file checksums
calculate_checksums() {
    local file="$1"

    echo "MD5: $(md5sum "$file" | cut -d' ' -f1)"
    echo "SHA1: $(sha1sum "$file" | cut -d' ' -f1)"
    echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1)"
}

# Function to update repository indexes
update_repo_indexes() {
    logger::info "Updating repository indexes..."

    cd "${DEB_REPO_DIR}"

    # Generate Packages file (using sudo)
    sudo dpkg-scanpackages -m "pool/${REPO_COMPONENT}" | sudo tee "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" > /dev/null
    sudo gzip -9c "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" | sudo tee "dists/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages.gz" > /dev/null

    # Update Release file
    local release_file="dists/${REPO_CODENAME}/Release"
    local temp_release=$(mktemp)

    # Update date and preserve metadata
    sudo sed "/^Date:/c\\Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')" "${release_file}" | \
    grep -v "^MD5Sum:\|^SHA1:\|^SHA256:\|^ " > "${temp_release}"

    # Add checksums
    echo "MD5Sum:" >> "${temp_release}"
    sudo find dists/${REPO_CODENAME} -type f ! -name "Release*" -exec md5sum {} \; | \
        sed 's|dists/'${REPO_CODENAME}'/| |' | \
        awk '{printf " %s %8d %s\n", $1, length($1), $2}' >> "${temp_release}"

    echo "SHA1:" >> "${temp_release}"
    sudo find dists/${REPO_CODENAME} -type f ! -name "Release*" -exec sha1sum {} \; | \
        sed 's|dists/'${REPO_CODENAME}'/| |' | \
        awk '{printf " %s %8d %s\n", $1, length($1), $2}' >> "${temp_release}"

    echo "SHA256:" >> "${temp_release}"
    sudo find dists/${REPO_CODENAME} -type f ! -name "Release*" -exec sha256sum {} \; | \
        sed 's|dists/'${REPO_CODENAME}'/| |' | \
        awk '{printf " %s %8d %s\n", $1, length($1), $2}' >> "${temp_release}"

    sudo mv "${temp_release}" "${release_file}"

    logger::info "Repository indexes updated successfully"
}

# Function to add a package file
add_package() {
    local source_file="$1"

    if [[ ! -f "$source_file" ]]; then
        logger::error "File not found: $source_file"
        return 1
    fi

    # Parse package information
    local parse_result
    if ! parse_result=$(parse_deb_info "$source_file"); then
        return 1
    fi

    read -r package_name version architecture <<< "$parse_result"
    logger::info "Adding package: $package_name version $version ($architecture)"

    # Create package pool structure (using sudo since /var/cache/apt/local-repo requires root)
    local package_dir="${POOL_DIR}/${REPO_COMPONENT}/${package_name:0:1}/${package_name}"
    sudo mkdir -p "$package_dir"

    # Generate destination filename
    local filename="${package_name}_${version}_${architecture}.deb"
    local dest_file="${package_dir}/${filename}"

    if [[ -f "$dest_file" ]]; then
        logger::warn "Package already exists: $filename"
        read -p "Overwrite? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            logger::info "Skipping package addition"
            return 0
        fi
    fi

    # Copy package to repository (using sudo)
    sudo cp "$source_file" "$dest_file"
    logger::info "Added package to: $dest_file"

    # Show package details
    logger::debug "Package details:"
    calculate_checksums "$dest_file" | sed 's/^/  /'

    # Update repository indexes
    update_repo_indexes

    logger::info "Successfully added package: $package_name"
}

# Function to detect if input is a URL
is_url() {
    local input="$1"
    [[ "$input" =~ ^https?:// ]]
}

# Function to download file from URL
download_file() {
    local url="$1"
    local temp_dir="$2"
    local filename

    # Extract filename from URL or generate one
    filename=$(basename "$url")
    if [[ ! "$filename" =~ \.deb$ ]]; then
        filename="downloaded_package.deb"
    fi

    local dest_file="${temp_dir}/${filename}"

    # Check if curl is available
    if ! command -v curl >/dev/null 2>&1; then
        logger::error "curl not found. Please install curl to download from URLs." >&2
        return 1
    fi

    logger::info "Downloading from URL: $url" >&2
    if curl -L --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36" -o "$dest_file" "$url" --progress-bar; then
        logger::info "Downloaded: $filename ($(du -h "$dest_file" | cut -f1))" >&2
        echo "$dest_file"
        return 0
    else
        logger::error "Failed to download with curl: $url" >&2
        return 1
    fi
}

# Function to download and add package
download_and_add() {
    local package_spec="$1"
    local temp_dir
    temp_dir=$(mktemp -d)

    # Check if the input is a URL
    if is_url "$package_spec"; then
        logger::info "Detected URL: $package_spec"

        # Extract package info from URL
        local filename package_name version
        filename=$(basename "$package_spec")
        if [[ "$filename" =~ ^([a-zA-Z0-9.-]+)_([0-9.-]+)_[a-zA-Z0-9.-]+\.deb$ ]]; then
            package_name="${BASH_REMATCH[1]}"
            version="${BASH_REMATCH[2]}"
            logger::info "Extracted package info: $package_name version $version"

            # Check if package already exists
            if grep -q -E "^Package: $package_name" "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" && \
               grep -A1 -E "^Package: $package_name" "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" | grep -q -E "^Version: $version"; then
                logger::warn "Package $package_name version $version already exists in the repository. Skipping download."
                rm -rf "$temp_dir"
                return 0
            fi
        fi

        # Validate that it's likely a .deb file
        if [[ ! "$package_spec" =~ \.deb(\?.*)?$ ]]; then
            logger::warn "URL does not appear to point to a .deb file: $package_spec"
            read -p "Continue anyway? [y/N] " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                logger::info "Download cancelled"
                rm -rf "$temp_dir"
                return 0
            fi
        fi

        # Download the file
        local downloaded_file
        if downloaded_file=$(download_file "$package_spec" "$temp_dir"); then
            logger::debug "Verifying downloaded file: $downloaded_file"

            # Verify it's a valid .deb file
            if parse_deb_info "$downloaded_file" >/dev/null; then
                add_package "$downloaded_file"
            else
                logger::error "Downloaded file is not a valid Debian package"
                logger::info "Troubleshooting information:"
                logger::info "  File: $downloaded_file"
                logger::info "  Size: $(ls -lh "$downloaded_file" | awk '{print $5}')"
                logger::info "  Type: $(file -b "$downloaded_file" 2>/dev/null || echo 'unknown')"

                # Check if it might be an HTML error page
                if head -c 100 "$downloaded_file" | grep -qi "<!DOCTYPE\|<html"; then
                    logger::error "Downloaded file appears to be an HTML page (possibly an error page)"
                    logger::debug "First few lines of downloaded file:"
                    head -5 "$downloaded_file" | sed 's/^/  /'
                fi

                # Keep the file for debugging if requested
                read -p "Keep downloaded file for debugging? [y/N] " -n 1 -r
                echo
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    local debug_file="$HOME/debug_$(basename "$downloaded_file")"
                    cp "$downloaded_file" "$debug_file"
                    logger::info "Debug file saved as: $debug_file"
                fi

                rm -rf "$temp_dir"
                return 1
            fi
        else
            rm -rf "$temp_dir"
            return 1
        fi
    else
        # Traditional apt download
        logger::info "Downloading package from repositories: $package_spec"

        if apt download "$package_spec" -o Dir::Cache::Archives="$temp_dir"; then
            # Add all downloaded files
            local downloaded_files
            mapfile -t downloaded_files < <(find "$temp_dir" -name "*.deb")

            if [[ ${#downloaded_files[@]} -eq 0 ]]; then
                logger::error "No .deb files downloaded for: $package_spec"
                rm -rf "$temp_dir"
                return 1
            fi

            for file in "${downloaded_files[@]}"; do
                add_package "$file"
            done
        else
            logger::error "Failed to download package: $package_spec"
            rm -rf "$temp_dir"
            return 1
        fi
    fi

    rm -rf "$temp_dir"
}

# Function to list packages in repository
list_packages() {
    logger::info "Packages in local repository:"

    if [[ ! -f "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages" ]]; then
        echo "  No packages found (repository may not be initialized)"
        return
    fi

    # Parse Packages file and show summary
    awk '
    /^Package:/ { pkg = $2 }
    /^Version:/ { ver = $2 }
    /^Architecture:/ { arch = $2 }
    /^$/ { if (pkg) printf "  %s (%s) [%s]\n", pkg, ver, arch; pkg=""; ver=""; arch="" }
    END { if (pkg) printf "  %s (%s) [%s]\n", pkg, ver, arch }
    ' "${DISTS_DIR}/${REPO_CODENAME}/${REPO_COMPONENT}/binary-${REPO_ARCHITECTURE}/Packages"
}

# Function to remove package
remove_package() {
    local package_name="$1"

    logger::info "Removing package: $package_name"

    # Find package files
    local package_files
    mapfile -t package_files < <(sudo find "${POOL_DIR}" -name "${package_name}_*.deb")

    if [[ ${#package_files[@]} -eq 0 ]]; then
        logger::warn "No packages found matching: $package_name"
        return 0
    fi

    local removed_count=0
    for file in "${package_files[@]}"; do
        logger::info "Removing: ${file##*/}"
        sudo rm -f "$file"
        ((removed_count++))

        # Remove empty directories
        local dir=$(dirname "$file")
        if [[ -d "$dir" ]] && [[ -z "$(sudo ls -A "$dir")" ]]; then
            sudo rmdir "$dir" 2>/dev/null || true
        fi
    done

    # Update repository indexes
    update_repo_indexes

    logger::info "Removed $removed_count package(s) for: $package_name"
}

# Function to show usage
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS] COMMAND

Commands:
  add FILE         Add a local .deb file to the repository
  download SPEC    Download and add a package from apt repositories or HTTP/HTTPS URLs
  list            List all packages in the repository
  remove PACKAGE   Remove a package from the repository
  update          Update repository indexes

Options:
  -h, --help      Show this help message

Examples:
  $0 add ./my-package_1.0.0_amd64.deb
  $0 download firefox
  $0 download firefox=85.0.1+build1-0ubuntu
  $0 download https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  $0 download https://github.com/user/project/releases/download/v1.0.0/package.deb
  $0 list
  $0 remove my-package
  $0 update
EOF
}

# Main function
main() {
    # Check if repository is initialized
    if [[ ! -d "$DEB_REPO_DIR" ]]; then
        logger::error "Repository not initialized. Run 'deb-repo-init.sh' first."
        exit 1
    fi

    case "${1:-}" in
        "add")
            if [[ $# -lt 2 ]]; then
                logger::error "Missing file argument for add command"
                show_usage
                exit 1
            fi
            add_package "$2"
            ;;
        "download")
            if [[ $# -lt 2 ]]; then
                logger::error "Missing package specification for download command"
                show_usage
                exit 1
            fi
            download_and_add "$2"
            ;;
        "list")
            list_packages
            ;;
        "remove")
            if [[ $# -lt 2 ]]; then
                logger::error "Missing package name for remove command"
                show_usage
                exit 1
            fi
            remove_package "$2"
            ;;
        "update")
            update_repo_indexes
            ;;
        "-h"|"--help")
            show_usage
            ;;
        "")
            logger::error "No command specified"
            show_usage
            exit 1
            ;;
        *)
            logger::error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
{{- else }}
echo "This script is only for Ubuntu systems"
exit 1
{{- end }}
